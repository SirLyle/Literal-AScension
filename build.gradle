buildscript {
    ext.kotlin_version = '1.0.3'
    ext.corePlugin = 'com.jamieswhiteshirt.literalascension.core.LiteralAscensionPlugin'
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'
apply plugin: 'idea'

allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

version = "1.0"
group= "com.jamieswhiteshirt.literalascension"
archivesBaseName = "literalascension"

minecraft {
    version = "1.10.2-12.18.1.2011"
    runDir = "run"

    clientJvmArgs = ["-Dfml.coreMods.load=$corePlugin"]
    serverJvmArgs = ["-Dfml.coreMods.load=$corePlugin"]
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20160518"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    maven {
        url 'http://maven.ilexiconn.net'
    }
}

configurations {
    required
    compile.extendsFrom(required)
}

dependencies {
    compile "net.ilexiconn:llibrary:1.5.1-1.10.2:dev"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    required "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    main.kotlin.srcDirs += 'src/main/kotlin'
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        languageLevel = '1.8'
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes "FMLCorePlugin": corePlugin
        attributes "FMLCorePluginContainsFMLMod": "true"
    }
    from {
        configurations.required.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

// AUTOMATIC MODEL GENERATION

ext.args = [:]

ext.requireArgument = {String property, String displayValue ->
    def value = args[property]
    if (value == null) {
        throw new InvalidUserDataException("$property must be set with \'$property=$displayValue\'")
    }
    return value
}

tasks.addRule("Pattern: <property>=<value>: Passes arguments to the scripts") { String taskName ->
    def match = taskName =~ /(.*?)=(.*?$)/
    if (match) {
        def property = match[0][1]
        def value = match[0][2]
        ext.args[property] = value;
        task(taskName) << {
            println "Passes value \'$value\' to args[\'$property\']"
        }
    }
}

import org.apache.tools.ant.filters.FixCrLfFilter

class CopyJsonTemplate extends DefaultTask {
    @Input
    def template

    @Input
    def arguments

    @Input
    def jsonRename

    @TaskAction
    def build() {
        def args = arguments()
        project.copy {
            from("templates/${template}") {
                expand(args)
                filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('crlf'))
            }
            into 'src/main/resources'
            rename { String filename ->
                def match = filename =~ /(.*)\.json/
                if (match) {
                    def prevFilename = match[0][1]
                    def newFilename = jsonRename.call(prevFilename)
                    return "${newFilename}.json"
                }
                else {
                    return filename
                }
            }
        }
    }
}


task generateBlockModel(type: CopyJsonTemplate) {
    template 'block'
    arguments {
        def blockName = requireArgument('blockName', 'block_name')
        return ['modid':archivesBaseName, 'block_name':blockName]
    }
    jsonRename {
        return args['blockName']
    }
}

task generateItemModel(type: CopyJsonTemplate) {
    template 'item'
    arguments {
        def itemName = requireArgument('itemName', 'item_name')
        return ['modid':archivesBaseName, 'item_name':itemName]
    }
    jsonRename {
        return args['itemName']
    }
}

task generateStepladderModel(type: CopyJsonTemplate) {
    template 'stepladder'
    arguments {
        def material = requireArgument('material', 'material')
        return ['material':material]
    }
    jsonRename { String prevName ->
        return args['material'] + '_' + prevName
    }
}

task generateChuteModel(type: CopyJsonTemplate) {
    template 'chute'
    arguments {
        def material = requireArgument('material', 'material')
        return ['material':material]
    }
    jsonRename { String prevName ->
        return args['material'] + '_' + prevName
    }
}

task generateNotchedModel(type: CopyJsonTemplate) {
    template 'notched'
    arguments {
        def material = requireArgument('material', 'material')
        return ['material':material]
    }
    jsonRename { String prevName ->
        return args['material'] + '_' + prevName
    }
}

task generateNotchedVariantsModel(type: CopyJsonTemplate) {
    template 'notched_variants'
    arguments {
        def material = requireArgument('material', 'material')
        return ['material':material]
    }
    jsonRename { String prevName ->
        return args['material'] + '_' + prevName
    }
}
