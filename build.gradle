buildscript {
    ext.corePlugin = 'com.jamieswhiteshirt.literalascension.core.plugin.LiteralAscensionPlugin'
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.20.0"
    id "org.jetbrains.kotlin.jvm" version "1.2.51"
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'
apply plugin: 'idea'

allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

version = "1.12.2-2.0.0.0"
group = "com.jamieswhiteshirt.literalascension" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "literalascension"

sourceCompatibility=1.8
targetCompatibility=1.8

minecraft {
    version = "1.12.2-14.23.5.2846"
    runDir = "run"

    mappings = "snapshot_20171003"
}

repositories {
    maven {
        name 'mcmoddev'
        url 'http://maven.mcmoddev.com'
    }
    maven {
        name 'shadowfacts'
        url "http://maven.shadowfacts.net/"
    }
    mavenCentral()
}

dependencies {
    compile group: "net.shadowfacts", name: "Forgelin", version: "$forgelin_version"
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    main.kotlin.srcDirs += 'src/main/kotlin'
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        languageLevel = '1.8'
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


jar {
    manifest {
        attributes "FMLCorePlugin": corePlugin
        attributes "FMLCorePluginContainsFMLMod": "true"
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes "FMLCorePlugin": corePlugin
        attributes "FMLCorePluginContainsFMLMod": "true"
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
ext.args = [:]

ext.requireArgument = {String property, String displayValue ->
    def value = args[property]
    if (value == null) {
        throw new InvalidUserDataException("$property must be set with \'$property=$displayValue\'")
    }
    return value
}

tasks.addRule("Pattern: <property>=<value>: Passes arguments to the scripts") { String taskName ->
    def match = taskName =~ /(.*?)=(.*?$)/
    if (match) {
        def property = match[0][1]
        def value = match[0][2]
        ext.args[property] = value;
        task(taskName) << {
            println "Passes value \'$value\' to args[\'$property\']"
        }
    }
}

import org.apache.tools.ant.filters.FixCrLfFilter

class CopyJsonTemplate extends DefaultTask {
    @Input
    def template

    @Input
    def destination = 'src/main/resources'

    @Input
    def arguments

    @Input
    def jsonRename

    @TaskAction
    def build() {
        def args = arguments()
        project.copy {
            from("templates/${template}") {
                expand(args)
                filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('crlf'))
            }
            into destination
            rename { String filename ->
                def match = filename =~ /(.*)\.json/
                if (match) {
                    def prevFilename = match[0][1]
                    def newFilename = jsonRename.call(prevFilename)
                    return "${newFilename}.json"
                }
                else {
                    return filename
                }
            }
        }
    }
}


task generateBlockModel(type: CopyJsonTemplate) {
    template 'block'
    arguments {
        def blockName = requireArgument('blockName', 'block_name')
        return ['modid':archivesBaseName, 'block_name':blockName]
    }
    jsonRename {
        return args['blockName']
    }
}

task generateItemModel(type: CopyJsonTemplate) {
    template 'item'
    arguments {
        def itemName = requireArgument('itemName', 'item_name')
        return ['modid':archivesBaseName, 'item_name':itemName]
    }
    jsonRename {
        return args['itemName']
    }
}

task generateStepladderModel(type: CopyJsonTemplate) {
    template 'stepladder'
    arguments {
        def material = requireArgument('material', 'material')
        def domain = requireArgument('domain', 'domain')
        def feet = requireArgument('feet', 'feet')
        def steps = requireArgument('steps', 'steps')
        return ['material':material, 'domain':domain, 'feet':feet, 'steps':steps]
    }
    jsonRename { String prevName ->
        return args['material'] + prevName
    }
}

task generateBOPStepladderModel(type: CopyJsonTemplate) {
    template 'bop_stepladder'
    arguments {
        def material = requireArgument('material', 'material')
        return ['material':material]
    }
    jsonRename { String prevName ->
        return args['material'] + prevName
    }
}

task generateChuteStoneModel(type: CopyJsonTemplate) {
    template 'chute_stone'
    arguments {
        def material = requireArgument('material', 'material')
        def domain = requireArgument('domain', 'domain')
        return ['material':material, 'domain':domain]
    }
    jsonRename { String prevName ->
        return args['material'] + prevName
    }
}

task generateChuteLogModel(type: CopyJsonTemplate) {
    template 'chute_log'
    arguments {
        def material = requireArgument('material', 'material')
        def domain = requireArgument('domain', 'domain')
        return ['material':material, 'domain':domain]
    }
    jsonRename { String prevName ->
        return args['material'] + prevName
    }
}

task generateChuteVariantsModel(type: CopyJsonTemplate) {
    template 'chute_variants'
    arguments {
        def material = requireArgument('material', 'material')
        def domain = requireArgument('domain', 'domain')
        return ['material':material, 'domain':domain]
    }
    jsonRename { String prevName ->
        return args['material'] + prevName
    }
}

task generateNotchedLogModel(type: CopyJsonTemplate) {
    template 'notched_log'
    arguments {
        def material = requireArgument('material', 'material')
        def domain = requireArgument('domain', 'domain')
        return ['material':material, 'domain':domain]
    }
    jsonRename { String prevName ->
        return args['material'] + prevName
    }
}

task generateNotchedVariantsModel(type: CopyJsonTemplate) {
    template 'notched_variants'
    arguments {
        def material = requireArgument('material', 'material')
        def domain = requireArgument('domain', 'domain')
        return ['material':material, 'domain':domain]
    }
    jsonRename { String prevName ->
        return args['material'] + prevName
    }
}

task generateNotchedStoneModel(type: CopyJsonTemplate) {
    template 'notched_stone'
    arguments {
        def material = requireArgument('material', 'material')
        def domain = requireArgument('domain', 'domain')
        return ['material':material, 'domain':domain]
    }
    jsonRename { String prevName ->
        return args['material'] + prevName
    }
}

task generateChiselCarvableRaw(type: CopyJsonTemplate) {
    template 'chisel_carvable_raw'
    arguments {
        def material = requireArgument('material', 'material')
        def domain = requireArgument('domain', 'domain')
        return ['material':material, 'domain':domain]
    }
    jsonRename { String prevName ->
        return "${args['material']}_raw${prevName}"
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
